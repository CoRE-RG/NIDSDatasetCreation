[General]
network = Car


###############################
# TODOs
# -imgpv2 reports?


###############################
# Common Ethernet Configuration

# Ethernet links are 1Gbps
*.*.eth[*].bitrate = 1Gbps

*.configurator.config = xmldoc("config.xml")

**.ip.limitedBroadcast = true

# disable local multicast loop
**.udp.defaultMulticastLoop = false


#################################
# Network Node Type Configuration

# use TSN switches
*.switch*.typename = "TsnSwitchWithLabeling"

# use TSN devices
*.zonalController*.typename = "TsnDevice"
*.zonalController*.ethernet.macHeaderChecker.promiscuous = true
*.lidar*.typename = "TsnDevice"
*.camera*.typename = "TsnDevice"
*.infotainment.typename = "TsnDevice"
*.infotainment.ethernet.macHeaderChecker.promiscuous = true
*.connectivityGateway.typename = "TsnDevice"
*.adas.typename = "TsnDevice"
*.masterClock.typename = "TsnDevice"


###########################
# Application Configuration

# camera applications
*.camera*.numApps = 1
*.camera*.app[0].typename = "UdpSourceApp"
*.cameraFront.app[0].source.packetNameFormat = "%M->SVideoFront-%c"
*.cameraRear.app[0].source.packetNameFormat = "%M->SVideoRear-%c"
*.camera*.app[0].source.packetLength = 1362B # => 1426B on phy
*.camera*.app[0].source.productionInterval = uniform(30us,100us) # => 176 Mbit/s on phy ~ 200 Mbit/s
*.camera*.app[0].io.destAddress = "adas"
*.cameraFront.app[0].io.destPort = 1111
*.cameraRear.app[0].io.destPort = 1112

# lidar applications
*.lidar*.numApps = 1
*.lidar*.app[0].typename = "UdpSourceApp"
*.lidarFrontLeft.app[0].source.packetNameFormat = "%M->SLidarFrontLeft-%c"
*.lidarFrontRight.app[0].source.packetNameFormat = "%M->SLidarFrontRight-%c"
*.lidarRearLeft.app[0].source.packetNameFormat = "%M->SLidarRearLeft-%c"
*.lidarRearRight.app[0].source.packetNameFormat = "%M->SLidarRearRight-%c"
*.lidar*.app[0].source.packetLength = 1836B # => 1526B + 410B = 1936B on phy
*.lidar*.app[0].source.productionInterval = 150us # => 104 Mbit/s on phy ~ 125 Mbit/s
*.lidar*.app[0].io.destAddress = "adas"
*.lidarFrontLeft.app[0].io.destPort = 2111
*.lidarFrontRight.app[0].io.destPort = 2112
*.lidarRearLeft.app[0].io.destPort = 2113
*.lidarRearRight.app[0].io.destPort = 2114

# zonalControllerFrontLeft applications
*.zonalControllerFrontLeft.numApps = 180
*.zonalControllerFrontLeft.app[0..2].typename = "UdpSourceApp"
*.zonalControllerFrontLeft.app[0].source.packetNameFormat = "%M->SManualThrottle-%c"
*.zonalControllerFrontLeft.app[1].source.packetNameFormat = "%M->SManualBrake-%c"
*.zonalControllerFrontLeft.app[2].source.packetNameFormat = "%M->SManualSteer-%c"
*.zonalControllerFrontLeft.app[0..2].source.packetLength = 46B # => 110B on phy
*.zonalControllerFrontLeft.app[0..2].source.productionInterval = 1ms
*.zonalControllerFrontLeft.app[0].io.destAddress = "224.0.0.10" # => 01-00-5E-00-00-0A
*.zonalControllerFrontLeft.app[1].io.destAddress = "224.0.0.11" # => 01-00-5E-00-00-0B
*.zonalControllerFrontLeft.app[2].io.destAddress = "224.0.0.12" # => 01-00-5E-00-00-0C
*.zonalControllerFrontLeft.app[0].io.destPort = 1000
*.zonalControllerFrontLeft.app[1].io.destPort = 1100
*.zonalControllerFrontLeft.app[2].io.destPort = 1200
*.zonalControllerFrontLeft.app[3..5].typename = "UdpSinkApp"
*.zonalControllerFrontLeft.app[3].display-name = "SAutoThrottle sink"
*.zonalControllerFrontLeft.app[4].display-name = "SAutoBrake sink"
*.zonalControllerFrontLeft.app[5].display-name = "SAutoSteer sink"
*.zonalControllerFrontLeft.app[3].io.multicastAddresses = ["224.0.0.20"]
*.zonalControllerFrontLeft.app[4].io.multicastAddresses = ["224.0.0.21"]
*.zonalControllerFrontLeft.app[5].io.multicastAddresses = ["224.0.0.22"]
*.zonalControllerFrontLeft.app[3].io.localPort = 2000
*.zonalControllerFrontLeft.app[4].io.localPort = 2100
*.zonalControllerFrontLeft.app[5].io.localPort = 2200
include secvi_car_zonalControllerFrontLeft.ini

# zonalControllerFrontRight applications
*.zonalControllerFrontRight.numApps = 188
*.zonalControllerFrontRight.app[0..2].typename = "UdpSinkApp"
*.zonalControllerFrontRight.app[0].display-name = "SManualThrottle sink"
*.zonalControllerFrontRight.app[1].display-name = "SManualBrake sink"
*.zonalControllerFrontRight.app[2].display-name = "SManualSteer sink"
*.zonalControllerFrontRight.app[0].io.multicastAddresses = ["224.0.0.10"]
*.zonalControllerFrontRight.app[1].io.multicastAddresses = ["224.0.0.11"]
*.zonalControllerFrontRight.app[2].io.multicastAddresses = ["224.0.0.12"]
*.zonalControllerFrontRight.app[0].io.localPort = 1000
*.zonalControllerFrontRight.app[1].io.localPort = 1100
*.zonalControllerFrontRight.app[2].io.localPort = 1200
*.zonalControllerFrontRight.app[3..5].typename = "UdpSinkApp"
*.zonalControllerFrontRight.app[3].display-name = "SAutoThrottle sink"
*.zonalControllerFrontRight.app[4].display-name = "SAutoBrake sink"
*.zonalControllerFrontRight.app[5].display-name = "SAutoSteer sink"
*.zonalControllerFrontRight.app[3].io.multicastAddresses = ["224.0.0.20"]
*.zonalControllerFrontRight.app[4].io.multicastAddresses = ["224.0.0.21"]
*.zonalControllerFrontRight.app[5].io.multicastAddresses = ["224.0.0.22"]
*.zonalControllerFrontRight.app[3].io.localPort = 2000
*.zonalControllerFrontRight.app[4].io.localPort = 2100
*.zonalControllerFrontRight.app[5].io.localPort = 2200
include secvi_car_zonalControllerFrontRight.ini

# zonalControllerRearLeft applications
*.zonalControllerRearLeft.numApps = 59
*.zonalControllerRearLeft.app[0..2].typename = "UdpSinkApp"
*.zonalControllerRearLeft.app[0].display-name = "SManualThrottle sink"
*.zonalControllerRearLeft.app[1].display-name = "SManualBrake sink"
*.zonalControllerRearLeft.app[2].display-name = "SManualSteer sink"
*.zonalControllerRearLeft.app[0].io.multicastAddresses = ["224.0.0.10"]
*.zonalControllerRearLeft.app[1].io.multicastAddresses = ["224.0.0.11"]
*.zonalControllerRearLeft.app[2].io.multicastAddresses = ["224.0.0.12"]
*.zonalControllerRearLeft.app[0].io.localPort = 1000
*.zonalControllerRearLeft.app[1].io.localPort = 1100
*.zonalControllerRearLeft.app[2].io.localPort = 1200
*.zonalControllerRearLeft.app[3..5].typename = "UdpSinkApp"
*.zonalControllerRearLeft.app[3].display-name = "SAutoThrottle sink"
*.zonalControllerRearLeft.app[4].display-name = "SAutoBrake sink"
*.zonalControllerRearLeft.app[5].display-name = "SAutoSteer sink"
*.zonalControllerRearLeft.app[3].io.multicastAddresses = ["224.0.0.20"]
*.zonalControllerRearLeft.app[4].io.multicastAddresses = ["224.0.0.21"]
*.zonalControllerRearLeft.app[5].io.multicastAddresses = ["224.0.0.22"]
*.zonalControllerRearLeft.app[3].io.localPort = 2000
*.zonalControllerRearLeft.app[4].io.localPort = 2100
*.zonalControllerRearLeft.app[5].io.localPort = 2200
include secvi_car_zonalControllerRearLeft.ini

# zonalControllerRearRight applications
*.zonalControllerRearRight.numApps = 190
*.zonalControllerRearRight.app[0..2].typename = "UdpSinkApp"
*.zonalControllerRearRight.app[0].display-name = "SManualThrottle sink"
*.zonalControllerRearRight.app[1].display-name = "SManualBrake sink"
*.zonalControllerRearRight.app[2].display-name = "SManualSteer sink"
*.zonalControllerRearRight.app[0].io.multicastAddresses = ["224.0.0.10"]
*.zonalControllerRearRight.app[1].io.multicastAddresses = ["224.0.0.11"]
*.zonalControllerRearRight.app[2].io.multicastAddresses = ["224.0.0.12"]
*.zonalControllerRearRight.app[0].io.localPort = 1000
*.zonalControllerRearRight.app[1].io.localPort = 1100
*.zonalControllerRearRight.app[2].io.localPort = 1200
*.zonalControllerRearRight.app[3..5].typename = "UdpSinkApp"
*.zonalControllerRearRight.app[3].display-name = "SAutoThrottle sink"
*.zonalControllerRearRight.app[4].display-name = "SAutoBrake sink"
*.zonalControllerRearRight.app[5].display-name = "SAutoSteer sink"
*.zonalControllerRearRight.app[3].io.multicastAddresses = ["224.0.0.20"]
*.zonalControllerRearRight.app[4].io.multicastAddresses = ["224.0.0.21"]
*.zonalControllerRearRight.app[5].io.multicastAddresses = ["224.0.0.22"]
*.zonalControllerRearRight.app[3].io.localPort = 2000
*.zonalControllerRearRight.app[4].io.localPort = 2100
*.zonalControllerRearRight.app[5].io.localPort = 2200
include secvi_car_zonalControllerRearRight.ini

# adas applications
*.adas.numApps = 10
*.adas.app[0..5].typename = "UdpSinkApp"
*.adas.app[0].display-name = "SVideoFront sink"
*.adas.app[0].io.localPort = 1111
*.adas.app[1].display-name = "SVideoRear sink"
*.adas.app[1].io.localPort = 1112
*.adas.app[2].display-name = "SLidarFrontLeft sink"
*.adas.app[2].io.localPort = 2111
*.adas.app[3].display-name = "SLidarFrontRight sink"
*.adas.app[3].io.localPort = 2112
*.adas.app[4].display-name = "SLidarRearLeft sink"
*.adas.app[4].io.localPort = 2113
*.adas.app[5].display-name = "SLidarRearRight sink"
*.adas.app[5].io.localPort = 2114
*.adas.app[6..8].typename = "UdpSourceApp"
*.adas.app[6].source.packetNameFormat = "%M->SAutoThrottle-%c"
*.adas.app[7].source.packetNameFormat = "%M->SAutoBrake-%c"
*.adas.app[8].source.packetNameFormat = "%M->SAutoSteer-%c"
*.adas.app[6..8].source.packetLength = 46B # => 110B on phy
*.adas.app[6..8].source.productionInterval = 1ms
*.adas.app[6].io.destAddress = "224.0.0.20" # => 01-00-5E-00-00-14
*.adas.app[7].io.destAddress = "224.0.0.21" # => 01-00-5E-00-00-15
*.adas.app[8].io.destAddress = "224.0.0.22" # => 01-00-5E-00-00-16
*.adas.app[6].io.destPort = 2000
*.adas.app[7].io.destPort = 2100
*.adas.app[8].io.destPort = 2200
*.adas.app[9].typename = "TcpClientApp"
*.adas.app[9].io.localPort = 200
*.adas.app[9].io.connectAddress = "connectivityGateway"
*.adas.app[9].io.connectPort = 300
*.adas.app[9].source.packetNameFormat = "%M->SEtsiCamOut-%c"
*.adas.app[9].source.packetLength = 28B
*.adas.app[9].source.productionInterval = uniform(100ms,1000ms)

# infotainment applications
*.infotainment.numApps = 53
include secvi_car_infotainment.ini

# connectivityGateway applications
*.connectivityGateway.numApps = 1
*.connectivityGateway.app[0].typename = "TcpServerApp"
*.connectivityGateway.app[0].display-name = "SEtsiCam proxy"
*.connectivityGateway.app[0].listener.localPort = 300
*.connectivityGateway.app[0].connection[0].source.packetNameFormat = "%M->SEtsiCamIn-%c"
*.connectivityGateway.app[0].connection[0].source.packetLength = 28B
*.connectivityGateway.app[0].connection[0].source.productionInterval = uniform(10ms,100ms)


#####################
# Clock Configuration

# clocks have a random constant drift in all network nodes
*.*.clock.oscillator.driftRate = uniform(-100ppm, 100ppm)

# application traffic sources use the local clock of the network node
*.*.app[*].source.clockModule = "^.^.clock"
*.*.app[*].*.source.clockModule = "^.^.^.clock"

# periodic gates in all traffic shapers use the local clock of the network node
*.*.eth[*].macLayer.queue.transmissionGate[*].clockModule = "^.^.^.^.clock"


####################################
# Time Synchronization Configuration

# enable time synchronization in all network nodes
*.*.hasTimeSynchronization = true

# master
*.masterClock.clock.typename = "OscillatorBasedClock"
*.masterClock.gptp.typename = "MultiDomainGptp"
*.masterClock.gptp.numDomains = 2
*.masterClock.gptp.domain[*].clockModule = "masterClock.clock"
*.masterClock.gptp.domain[0].gptpNodeType = "MASTER_NODE"
*.masterClock.gptp.domain[0].slavePort = ""
*.masterClock.gptp.domain[0].masterPorts = ["eth0"]
*.masterClock.gptp.domain[1].gptpNodeType = "MASTER_NODE"
*.masterClock.gptp.domain[1].slavePort = ""
*.masterClock.gptp.domain[1].masterPorts = ["eth0"]

# slaves
*.zonalController*.clock.typename = "MultiClock"
*.zonalController*.clock.numClocks = 2
*.zonalController*.clock.clock[*].defaultOverdueClockEventHandlingMode = "execute"
*.zonalController*.gptp.typename = "MultiDomainGptp"
*.zonalController*.gptp.numDomains = 2
*.zonalController*.gptp.domain[*].slavePort = "eth0"
*.lidar*.clock.typename = "MultiClock"
*.lidar*.clock.numClocks = 2
*.lidar*.clock.clock[*].defaultOverdueClockEventHandlingMode = "execute"
*.lidar*.gptp.typename = "MultiDomainGptp"
*.lidar*.gptp.numDomains = 2
*.lidar*.gptp.domain[*].slavePort = "eth0"
*.camera*.clock.typename = "MultiClock"
*.camera*.clock.numClocks = 2
*.camera*.clock.clock[*].defaultOverdueClockEventHandlingMode = "execute"
*.camera*.gptp.typename = "MultiDomainGptp"
*.camera*.gptp.numDomains = 2
*.camera*.gptp.domain[*].slavePort = "eth0"
*.infotainment.clock.typename = "MultiClock"
*.infotainment.clock.numClocks = 2
*.infotainment.clock.clock[*].defaultOverdueClockEventHandlingMode = "execute"
*.infotainment.gptp.typename = "MultiDomainGptp"
*.infotainment.gptp.numDomains = 2
*.infotainment.gptp.domain[*].slavePort = "eth0"
*.connectivityGateway.clock.typename = "MultiClock"
*.connectivityGateway.clock.numClocks = 2
*.connectivityGateway.clock.clock[*].defaultOverdueClockEventHandlingMode = "execute"
*.connectivityGateway.gptp.typename = "MultiDomainGptp"
*.connectivityGateway.gptp.numDomains = 2
*.connectivityGateway.gptp.domain[*].slavePort = "eth0"
*.adas.clock.typename = "MultiClock"
*.adas.clock.numClocks = 2
*.adas.clock.clock[*].defaultOverdueClockEventHandlingMode = "execute"
*.adas.gptp.typename = "MultiDomainGptp"
*.adas.gptp.numDomains = 2
*.adas.gptp.domain[*].slavePort = "eth0"

# all Ethernet switches act as a gPTP bridge
*.switch*.clock.typename = "MultiClock"
*.switch*.clock.numClocks = 2
*.switch*.clock.clock[*].defaultOverdueClockEventHandlingMode = "execute"
*.switch*.gptp.typename = "MultiDomainGptp"
*.switch*.gptp.numDomains = 2
*.switchRearRight.gptp.domain[0].slavePort = "eth5"
*.switchRearRight.gptp.domain[0].masterPorts = ["eth1", "eth2", "eth3", "eth4"]
*.switchRearRight.gptp.domain[1].slavePort = "eth5"
*.switchRearRight.gptp.domain[1].masterPorts = ["eth0", "eth2", "eth3", "eth4"]
*.switchRearLeft.gptp.domain[0].slavePort = "eth0"
*.switchRearLeft.gptp.domain[0].masterPorts = ["eth1", "eth2", "eth3", "eth4"]
*.switchRearLeft.gptp.domain[1].slavePort = "eth1"
*.switchRearLeft.gptp.domain[1].masterPorts = ["eth2", "eth3", "eth4"]
*.switchFrontLeft.gptp.domain[0].slavePort = "eth1"
*.switchFrontLeft.gptp.domain[0].masterPorts = ["eth0", "eth2", "eth3", "eth4", "eth5"]
*.switchFrontLeft.gptp.domain[1].slavePort = "eth0"
*.switchFrontLeft.gptp.domain[1].masterPorts = ["eth1", "eth2", "eth3", "eth4", "eth5"]
*.switchFrontRight.gptp.domain[0].slavePort = "eth0"
*.switchFrontRight.gptp.domain[0].masterPorts = ["eth2", "eth3", "eth4"]
*.switchFrontRight.gptp.domain[1].slavePort = "eth1"
*.switchFrontRight.gptp.domain[1].masterPorts = ["eth0", "eth2", "eth3", "eth4"]


#############################
# Forwarding Configuration

# disable automatic MAC forwarding table configuration
*.macForwardingTableConfigurator.typename = ""

# "disable" MAC forwarding table aging
*.switch*.macTable.agingTime = 1200s

# disable MAC learning
*.switch*.bridging.interfaceRelay.learner.typename = ""

include switchFrontLeftForwardingTable.ini
include switchFrontRightForwardingTable.ini
include switchRearLeftForwardingTable.ini
include switchRearRightForwardingTable.ini


#############################
# Stream Coding Configuration

# enable outgoing TSN streams
*.*.hasOutgoingStreams = true

# video stream identification and coding
*.cameraFront.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                              {stream: "SVideoFront", packetFilter: expr(has(udp) && udp.destPort == 1111), sequenceNumbering: true}]
*.cameraFront.bridging.streamCoder.encoder.mapping = [{stream: "SSync", vlan: 0, pcp: 7},
                                                      {stream: "SVideoFront", vlan: 0, pcp: 5}]
*.cameraRear.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                             {stream: "SVideoRear", packetFilter: expr(has(udp) && udp.destPort == 1112), sequenceNumbering: true}]
*.cameraRear.bridging.streamCoder.encoder.mapping = [{stream: "SSync", vlan: 0, pcp: 7},
                                                     {stream: "SVideoRear", vlan: 0, pcp: 5}]

# lidar stream identification and coding
*.lidarFrontLeft.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                                 {stream: "SLidarFrontLeft", packetFilter: expr(has(TransportProtocolInd)), sequenceNumbering: true}]
*.lidarFrontLeft.bridging.streamCoder.encoder.mapping = [{stream: "SSync", vlan: 0, pcp: 7},
                                                         {stream: "SLidarFrontLeft", vlan: 0, pcp: 5}]
*.lidarFrontRight.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                                  {stream: "SLidarFrontRight", packetFilter: expr(has(TransportProtocolInd)), sequenceNumbering: true}]
*.lidarFrontRight.bridging.streamCoder.encoder.mapping = [{stream: "SSync", vlan: 0, pcp: 7},
                                                          {stream: "SLidarFrontRight", vlan: 0, pcp: 5}]
*.lidarRearLeft.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                                {stream: "SLidarRearLeft", packetFilter: expr(has(TransportProtocolInd)), sequenceNumbering: true}]
*.lidarRearLeft.bridging.streamCoder.encoder.mapping = [{stream: "SSync", vlan: 0, pcp: 7},
                                                        {stream: "SLidarRearLeft", vlan: 0, pcp: 5}]
*.lidarRearRight.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                                 {stream: "SLidarRearRight", packetFilter: expr(has(TransportProtocolInd)), sequenceNumbering: true}]
*.lidarRearRight.bridging.streamCoder.encoder.mapping = [{stream: "SSync", vlan: 0, pcp: 7},
                                                         {stream: "SLidarRearRight", vlan: 0, pcp: 5}]

# zonal controller identification and coding
*.zonalControllerFrontLeft.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                                           {stream: "SManualThrottle", packetFilter: expr(has(udp) && udp.destPort == 1000), sequenceNumbering: true},
                                                                           {stream: "SManualBrake", packetFilter: expr(has(udp) && udp.destPort == 1100), sequenceNumbering: true},
                                                                           {stream: "SManualSteer", packetFilter: expr(has(udp) && udp.destPort == 1200), sequenceNumbering: true},
                                                                           {stream: "SControl", packetFilter: expr(has(udp) && udp.destPort >= 3000)}]
*.zonalControllerFrontRight.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                                            {stream: "SControl", packetFilter: expr(has(udp) && udp.destPort >= 3000)}]
*.zonalControllerRearLeft.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                                            {stream: "SControl", packetFilter: expr(has(udp) && udp.destPort >= 3000)}]
*.zonalControllerRearRight.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                                            {stream: "SControl", packetFilter: expr(has(udp) && udp.destPort >= 3000)}]
*.zonalController*.bridging.streamCoder.decoder.mapping = [{destination: "01-00-5E-00-00-0A", vlan: 0, pcp: 6, stream: "SManualThrottle"},
                                                           {destination: "01-00-5E-00-00-0A", vlan: 1, pcp: 6, stream: "SManualThrottle1"},
                                                           {destination: "01-00-5E-00-00-0A", vlan: 2, pcp: 6, stream: "SManualThrottle2"},
                                                           {destination: "01-00-5E-00-00-0B", vlan: 0, pcp: 6, stream: "SManualBrake"},
                                                           {destination: "01-00-5E-00-00-0B", vlan: 1, pcp: 6, stream: "SManualBrake1"},
                                                           {destination: "01-00-5E-00-00-0B", vlan: 2, pcp: 6, stream: "SManualBrake2"},
                                                           {destination: "01-00-5E-00-00-0C", vlan: 0, pcp: 6, stream: "SManualSteer"},
                                                           {destination: "01-00-5E-00-00-0C", vlan: 1, pcp: 6, stream: "SManualSteer1"},
                                                           {destination: "01-00-5E-00-00-0C", vlan: 2, pcp: 6, stream: "SManualSteer2"},
			                                               {destination: "01-00-5E-00-00-14", vlan: 0, pcp: 6, stream: "SAutoThrottle"},
			                                               {destination: "01-00-5E-00-00-14", vlan: 1, pcp: 6, stream: "SAutoThrottle1"},
			                                               {destination: "01-00-5E-00-00-14", vlan: 2, pcp: 6, stream: "SAutoThrottle2"},
			                                               {destination: "01-00-5E-00-00-15", vlan: 0, pcp: 6, stream: "SAutoBrake"},
			                                               {destination: "01-00-5E-00-00-15", vlan: 1, pcp: 6, stream: "SAutoBrake1"},
			                                               {destination: "01-00-5E-00-00-15", vlan: 2, pcp: 6, stream: "SAutoBrake2"},
			                                               {destination: "01-00-5E-00-00-16", vlan: 0, pcp: 6, stream: "SAutoSteer"},
			                                               {destination: "01-00-5E-00-00-16", vlan: 1, pcp: 6, stream: "SAutoSteer1"},
			                                               {destination: "01-00-5E-00-00-16", vlan: 2, pcp: 6, stream: "SAutoSteer2"}]
*.zonalController*.bridging.streamCoder.encoder.mapping = [{stream: "SSync", vlan: 0, pcp: 7},
                                                           {stream: "SManualThrottle", vlan: 0, pcp: 6},
                                                           {stream: "SManualBrake", vlan: 0, pcp: 6},
                                                           {stream: "SManualSteer", vlan: 0, pcp: 6},
                                                           {stream: "SAutoThrottle", vlan: 0, pcp: 6},
                                                           {stream: "SAutoBrake", vlan: 0, pcp: 6},
                                                           {stream: "SAutoSteer", vlan: 0, pcp: 6},
                                                           {stream: "SControl", vlan: 0, pcp: 4}]

# adas identification and coding
*.adas.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                       {stream: "SAutoThrottle", packetFilter: expr(has(udp) && udp.destPort == 2000), sequenceNumbering: true},
                                                       {stream: "SAutoBrake", packetFilter: expr(has(udp) && udp.destPort == 2100), sequenceNumbering: true},
                                                       {stream: "SAutoSteer", packetFilter: expr(has(udp) && udp.destPort == 2200), sequenceNumbering: true},
                                                       {stream: "SEtsiCamOut", packetFilter: expr(has(tcp) && tcp.destPort == 300)}]
*.adas.bridging.streamCoder.decoder.mapping = [{destination: "01-00-5E-00-00-14", vlan: 0, pcp: 6, stream: "SAutoThrottle"},
                                               {destination: "01-00-5E-00-00-14", vlan: 1, pcp: 6, stream: "SAutoThrottle1"},
                                               {destination: "01-00-5E-00-00-14", vlan: 2, pcp: 6, stream: "SAutoThrottle2"},
                                               {destination: "01-00-5E-00-00-15", vlan: 0, pcp: 6, stream: "SAutoBrake"},
                                               {destination: "01-00-5E-00-00-15", vlan: 1, pcp: 6, stream: "SAutoBrake1"},
                                               {destination: "01-00-5E-00-00-15", vlan: 2, pcp: 6, stream: "SAutoBrake2"},
                                               {destination: "01-00-5E-00-00-16", vlan: 0, pcp: 6, stream: "SAutoSteer"},
                                               {destination: "01-00-5E-00-00-16", vlan: 1, pcp: 6, stream: "SAutoSteer1"},
                                               {destination: "01-00-5E-00-00-16", vlan: 2, pcp: 6, stream: "SAutoSteer2"}]
*.adas.bridging.streamCoder.encoder.mapping = [{stream: "SSync", vlan: 0, pcp: 7},
                                               {stream: "SAutoThrottle", vlan: 0, pcp: 6},
                                               {stream: "SAutoBrake", vlan: 0, pcp: 6},
                                               {stream: "SAutoSteer", vlan: 0, pcp: 6},
                                               {stream: "SEtsiCamOut", vlan: 0, pcp: 2}]

# infotainment identification and coding
*.infotainment.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                               {stream: "SControl", packetFilter: expr(has(udp) && udp.destPort >= 3000)}]
*.infotainment.bridging.streamCoder.encoder.mapping = [{stream: "SSync", vlan: 0, pcp: 7},
                                                       {stream: "SControl", vlan: 0, pcp: 4}]

# connectivityGateway identification and coding
*.connectivityGateway.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")},
                                                                      {stream: "SEtsiCamIn", packetFilter: expr(has(tcp) && tcp.destPort == 200)}]
*.connectivityGateway.bridging.streamCoder.encoder.mapping = [{stream: "SSync", vlan: 0, pcp: 7},
                                                              {stream: "SEtsiCamIn", vlan: 0, pcp: 2}]

# stream identification on switches
*.switch*.bridging.streamIdentifier.identifier.mapping = [{stream: "SSync", packetFilter: expr(name =~ "*Gptp*")}]
*.switch*.bridging.streamCoder.decoder.mapping = [{destination: "01-80-C2-00-00-0E", stream: "SSync"},
                                                  {source: "cameraFront", vlan: 0, pcp: 5, stream: "SVideoFront"},
                                                  {source: "cameraFront", vlan: 1, pcp: 5, stream: "SVideoFront1"},
												  {source: "cameraFront", vlan: 2, pcp: 5, stream: "SVideoFront2"},
                                                  {source: "cameraRear", vlan: 0, pcp: 5, stream: "SVideoRear"},
                                                  {source: "cameraRear", vlan: 1, pcp: 5, stream: "SVideoRear1"},
                                                  {source: "cameraRear", vlan: 2, pcp: 5, stream: "SVideoRear2"},
                                                  {source: "lidarFrontLeft", vlan: 0, pcp: 5, stream: "SLidarFrontLeft"},
                                                  {source: "lidarFrontLeft", vlan: 1, pcp: 5, stream: "SLidarFrontLeft1"},
                                                  {source: "lidarFrontLeft", vlan: 2, pcp: 5, stream: "SLidarFrontLeft2"},
                                                  {source: "lidarFrontRight", vlan: 0, pcp: 5, stream: "SLidarFrontRight"},
                                                  {source: "lidarFrontRight", vlan: 1, pcp: 5, stream: "SLidarFrontRight1"},
                                                  {source: "lidarFrontRight", vlan: 2, pcp: 5, stream: "SLidarFrontRight2"},
                                                  {source: "lidarRearLeft", vlan: 0, pcp: 5, stream: "SLidarRearLeft"},
                                                  {source: "lidarRearLeft", vlan: 1, pcp: 5, stream: "SLidarRearLeft1"},
                                                  {source: "lidarRearLeft", vlan: 2, pcp: 5, stream: "SLidarRearLeft2"},
                                                  {source: "lidarRearRight", vlan: 0, pcp: 5, stream: "SLidarRearRight"},
                                                  {source: "lidarRearRight", vlan: 1, pcp: 5, stream: "SLidarRearRight1"},
                                                  {source: "lidarRearRight", vlan: 2, pcp: 5, stream: "SLidarRearRight2"},
                                                  {destination: "01-00-5E-00-00-0A", vlan: 0, pcp: 6, stream: "SManualThrottle"},
                                                  {destination: "01-00-5E-00-00-0A", vlan: 1, pcp: 6, stream: "SManualThrottle1"},
                                                  {destination: "01-00-5E-00-00-0A", vlan: 2, pcp: 6, stream: "SManualThrottle2"},
                                                  {destination: "01-00-5E-00-00-0B", vlan: 0, pcp: 6, stream: "SManualBrake"},
                                                  {destination: "01-00-5E-00-00-0B", vlan: 1, pcp: 6, stream: "SManualBrake1"},
                                                  {destination: "01-00-5E-00-00-0B", vlan: 2, pcp: 6, stream: "SManualBrake2"},
                                                  {destination: "01-00-5E-00-00-0C", vlan: 0, pcp: 6, stream: "SManualSteer"},
                                                  {destination: "01-00-5E-00-00-0C", vlan: 1, pcp: 6, stream: "SManualSteer1"},
                                                  {destination: "01-00-5E-00-00-0C", vlan: 2, pcp: 6, stream: "SManualSteer2"},
	                                              {destination: "01-00-5E-00-00-14", vlan: 0, pcp: 6, stream: "SAutoThrottle"},
	                                              {destination: "01-00-5E-00-00-14", vlan: 1, pcp: 6, stream: "SAutoThrottle1"},
	                                              {destination: "01-00-5E-00-00-14", vlan: 2, pcp: 6, stream: "SAutoThrottle2"},
	                                              {destination: "01-00-5E-00-00-15", vlan: 0, pcp: 6, stream: "SAutoBrake"},
	                                              {destination: "01-00-5E-00-00-15", vlan: 1, pcp: 6, stream: "SAutoBrake1"},
	                                              {destination: "01-00-5E-00-00-15", vlan: 2, pcp: 6, stream: "SAutoBrake2"},
	                                              {destination: "01-00-5E-00-00-16", vlan: 0, pcp: 6, stream: "SAutoSteer"},
	                                              {destination: "01-00-5E-00-00-16", vlan: 1, pcp: 6, stream: "SAutoSteer1"},
	                                              {destination: "01-00-5E-00-00-16", vlan: 2, pcp: 6, stream: "SAutoSteer2"},
                                                  {vlan: 0, pcp: 4, stream: "SControl"},
                                                  {vlan: 0, pcp: 2, stream: "SEtsiCam"}]
*.switch*.bridging.streamCoder.encoder.mapping = [{stream: "SSync", vlan: 0, pcp: 7},
                                                  {stream: "SVideoFront", vlan: 0, pcp: 5},
                                                  {stream: "SVideoFront1", vlan: 1, pcp: 5},
                                                  {stream: "SVideoFront2", vlan: 2, pcp: 5},
                                                  {stream: "SVideoRear", vlan: 0, pcp: 5},
                                                  {stream: "SVideoRear1", vlan: 1, pcp: 5},
                                                  {stream: "SVideoRear2", vlan: 2, pcp: 5},
                                                  {stream: "SLidarFrontLeft", vlan: 0, pcp: 5},
                                                  {stream: "SLidarFrontLeft1", vlan: 1, pcp: 5},
                                                  {stream: "SLidarFrontLeft2", vlan: 2, pcp: 5},
                                                  {stream: "SLidarFrontRight", vlan: 0, pcp: 5},
                                                  {stream: "SLidarFrontRight1", vlan: 1, pcp: 5},
                                                  {stream: "SLidarFrontRight2", vlan: 2, pcp: 5},
                                                  {stream: "SLidarRearLeft", vlan: 0, pcp: 5},
                                                  {stream: "SLidarRearLeft1", vlan: 1, pcp: 5},
                                                  {stream: "SLidarRearLeft2", vlan: 2, pcp: 5},
                                                  {stream: "SLidarRearRight", vlan: 0, pcp: 5},
                                                  {stream: "SLidarRearRight1", vlan: 1, pcp: 5},
                                                  {stream: "SLidarRearRight2", vlan: 2, pcp: 5},
                                                  {stream: "SManualThrottle", vlan: 0, pcp: 6},
                                                  {stream: "SManualThrottle1", vlan: 1, pcp: 6},
                                                  {stream: "SManualThrottle2", vlan: 2, pcp: 6},
                                                  {stream: "SManualBrake", vlan: 0, pcp: 6},
                                                  {stream: "SManualBrake1", vlan: 1, pcp: 6},
                                                  {stream: "SManualBrake2", vlan: 2, pcp: 6},
                                                  {stream: "SManualSteer", vlan: 0, pcp: 6},
                                                  {stream: "SManualSteer1", vlan: 1, pcp: 6},
                                                  {stream: "SManualSteer2", vlan: 2, pcp: 6},
                                                  {stream: "SAutoThrottle", vlan: 0, pcp: 6},
                                                  {stream: "SAutoThrottle1", vlan: 1, pcp: 6},
                                                  {stream: "SAutoThrottle2", vlan: 2, pcp: 6},
                                                  {stream: "SAutoBrake", vlan: 0, pcp: 6},
                                                  {stream: "SAutoBrake1", vlan: 1, pcp: 6},
                                                  {stream: "SAutoBrake2", vlan: 2, pcp: 6},
                                                  {stream: "SAutoSteer", vlan: 0, pcp: 6},
                                                  {stream: "SAutoSteer1", vlan: 1, pcp: 6},
                                                  {stream: "SAutoSteer2", vlan: 2, pcp: 6},
                                                  {stream: "SControl", vlan: 0, pcp: 4},
                                                  {stream: "SEtsiCam", vlan: 0, pcp: 2}]


###############################
# Traffic Shaping Configuration

# enable egress traffic shaping
*.*.hasEgressTrafficShaping = true

# set traffic classes
*.*.eth[*].macLayer.queue.numTrafficClasses = 8
*.*.eth[*].macLayer.queue.*[0].display-name = "0_background"
*.*.eth[*].macLayer.queue.*[1].display-name = "1_best_effort"
*.*.eth[*].macLayer.queue.*[2].display-name = "2_v2x"
*.*.eth[*].macLayer.queue.*[3].display-name = "3_misc"
*.*.eth[*].macLayer.queue.*[4].display-name = "4_control"
*.*.eth[*].macLayer.queue.*[5].display-name = "5_sensors"
*.*.eth[*].macLayer.queue.*[6].display-name = "6_drive"
*.*.eth[*].macLayer.queue.*[7].display-name = "7_sync"

# configure GCLs
*.*.eth[*].macLayer.queue.gateControlList.numeGates = 8
*.*.eth[*].macLayer.queue.gateControlList.mapping = "76543210"
*.*.eth[*].macLayer.queue.transmissionGate[*].scheduleForAbsoluteTime = true # false: Workaround for PeriodicGate scheduling Events in the past

# zonal controller front left
*.zonalControllerFrontLeft.eth[0].macLayer.queue.hasGcl = true
*.zonalControllerFrontLeft.eth[0].macLayer.queue.gateControlList.offset = 0us
*.zonalControllerFrontLeft.eth[0].macLayer.queue.gateControlList.durations = [3us, 997us] # 3 manual streams with 110B(phy frame) = 880Bit(phy frame) + 96Bit(IFG) =1Gbit/s=> 0.976us ~> 1us
*.zonalControllerFrontLeft.eth[0].macLayer.queue.gateControlList.gateStates = ["01000000", "10111111"]

# switch front left
*.switchFrontLeft.eth[0].macLayer.queue.transmissionSelectionAlgorithm[5].typename = "Ieee8021qCreditBasedShaper"
*.switchFrontLeft.eth[0].macLayer.queue.transmissionSelectionAlgorithm[5].idleSlope = 450Mbps # => 1xSVideo:176[~200]Mbit/s + 2xSLidar:104[~125]Mbit/s
*.switchFrontLeft.eth[1].macLayer.queue.transmissionSelectionAlgorithm[5].typename = "Ieee8021qCreditBasedShaper"
*.switchFrontLeft.eth[1].macLayer.queue.transmissionSelectionAlgorithm[5].idleSlope = 450Mbps # => 1xSVideo:176[~200]Mbit/s + 2xSLidar:104[~125]Mbit/s
*.switchFrontLeft.eth[0].macLayer.queue.hasGcl = true
*.switchFrontLeft.eth[0].macLayer.queue.gateControlList.offset = 0us
*.switchFrontLeft.eth[0].macLayer.queue.gateControlList.durations = [31us, 3us, 59us, 3us, 904us] # +30us sync buffer
*.switchFrontLeft.eth[0].macLayer.queue.gateControlList.gateStates = ["10111111", "01000000", "10111111", "01000000", "10111111"]
*.switchFrontLeft.eth[1].macLayer.queue.hasGcl = true
*.switchFrontLeft.eth[1].macLayer.queue.gateControlList.offset = 0us
*.switchFrontLeft.eth[1].macLayer.queue.gateControlList.durations = [31us, 3us, 59us, 3us, 904us]
*.switchFrontLeft.eth[1].macLayer.queue.gateControlList.gateStates = ["10111111", "01000000", "10111111", "01000000", "10111111"]
*.switchFrontLeft.eth[4].macLayer.queue.hasGcl = true
*.switchFrontLeft.eth[4].macLayer.queue.gateControlList.offset = 0us
*.switchFrontLeft.eth[4].macLayer.queue.gateControlList.durations = [93us, 6us, 901us] # +frer = auto streams x 2 = 6 streams
*.switchFrontLeft.eth[4].macLayer.queue.gateControlList.gateStates = ["10111111", "01000000", "10111111"]

# switch front right
*.switchFrontRight.eth[0].macLayer.queue.transmissionSelectionAlgorithm[5].typename = "Ieee8021qCreditBasedShaper"
*.switchFrontRight.eth[0].macLayer.queue.transmissionSelectionAlgorithm[5].idleSlope = 325Mbps # => 1xSVideo:176[~200]Mbit/s + 1xSLidar:104[~125]Mbit/s
*.switchFrontRight.eth[1].macLayer.queue.transmissionSelectionAlgorithm[5].typename = "Ieee8021qCreditBasedShaper"
*.switchFrontRight.eth[1].macLayer.queue.transmissionSelectionAlgorithm[5].idleSlope = 775Mbps # => 2xSVideo:176[~200]Mbit/s + 3xSLidar:104[~125]Mbit/s
*.switchFrontRight.eth[0].macLayer.queue.hasGcl = true
*.switchFrontRight.eth[0].macLayer.queue.gateControlList.offset = 0us
*.switchFrontRight.eth[0].macLayer.queue.gateControlList.durations = [62us, 3us, 935us]
*.switchFrontRight.eth[0].macLayer.queue.gateControlList.gateStates = ["10111111", "01000000", "10111111"]
*.switchFrontRight.eth[1].macLayer.queue.hasGcl = true
*.switchFrontRight.eth[1].macLayer.queue.gateControlList.offset = 0us
*.switchFrontRight.eth[1].macLayer.queue.gateControlList.durations = [62us, 3us, 935us]
*.switchFrontRight.eth[1].macLayer.queue.gateControlList.gateStates = ["10111111", "01000000", "10111111"]
*.switchFrontRight.eth[4].macLayer.queue.hasGcl = true
*.switchFrontRight.eth[4].macLayer.queue.gateControlList.offset = 0us
*.switchFrontRight.eth[4].macLayer.queue.gateControlList.durations = [62us, 6us, 56us, 6us, 870us] # +frer = manual streams x2 + auto stream x2 = 12 streams
*.switchFrontRight.eth[4].macLayer.queue.gateControlList.gateStates = ["10111111", "01000000", "10111111", "01000000", "10111111"]

# switch rear left
*.switchRearLeft.eth[0].macLayer.queue.transmissionSelectionAlgorithm[5].typename = "Ieee8021qCreditBasedShaper"
*.switchRearLeft.eth[0].macLayer.queue.transmissionSelectionAlgorithm[5].idleSlope = 775Mbps # => 2xSVideo:176[~200]Mbit/s + 3xSLidar:104[~125]Mbit/s
*.switchRearLeft.eth[1].macLayer.queue.transmissionSelectionAlgorithm[5].typename = "Ieee8021qCreditBasedShaper"
*.switchRearLeft.eth[1].macLayer.queue.transmissionSelectionAlgorithm[5].idleSlope = 325Mbps # => 1xSVideo:176[~200]Mbit/s + 1xSLidar:104[~125]Mbit/s
*.switchRearLeft.eth[0].macLayer.queue.hasGcl = true
*.switchRearLeft.eth[0].macLayer.queue.gateControlList.offset = 0us
*.switchRearLeft.eth[0].macLayer.queue.gateControlList.durations = [62us, 3us, 935us]
*.switchRearLeft.eth[0].macLayer.queue.gateControlList.gateStates = ["10111111", "01000000", "10111111"]
*.switchRearLeft.eth[1].macLayer.queue.hasGcl = true
*.switchRearLeft.eth[1].macLayer.queue.gateControlList.offset = 0us
*.switchRearLeft.eth[1].macLayer.queue.gateControlList.durations = [62us, 3us, 935us]
*.switchRearLeft.eth[1].macLayer.queue.gateControlList.gateStates = ["10111111", "01000000", "10111111"]
*.switchRearLeft.eth[4].macLayer.queue.hasGcl = true
*.switchRearLeft.eth[4].macLayer.queue.gateControlList.offset = 0us
*.switchRearLeft.eth[4].macLayer.queue.gateControlList.durations = [62us, 6us, 56us, 6us, 870us]
*.switchRearLeft.eth[4].macLayer.queue.gateControlList.gateStates = ["10111111", "01000000", "10111111", "01000000", "10111111"]

# switch rear right
*.switchRearRight.eth[2].macLayer.queue.transmissionSelectionAlgorithm[5].typename = "Ieee8021qCreditBasedShaper"
*.switchRearRight.eth[2].macLayer.queue.transmissionSelectionAlgorithm[5].idleSlope = 900Mbps # => 2xSVideo:176[~200]Mbit/s + 4xSLidar:104[~125]Mbit/s
*.switchRearRight.eth[0].macLayer.queue.hasGcl = true
*.switchRearRight.eth[0].macLayer.queue.gateControlList.offset = 0us
*.switchRearRight.eth[0].macLayer.queue.gateControlList.durations = [31us, 3us, 59us, 3us, 904us]
*.switchRearRight.eth[0].macLayer.queue.gateControlList.gateStates = ["10111111", "01000000", "10111111", "01000000", "10111111"]
*.switchRearRight.eth[1].macLayer.queue.hasGcl = true
*.switchRearRight.eth[1].macLayer.queue.gateControlList.offset = 0us
*.switchRearRight.eth[1].macLayer.queue.gateControlList.durations = [31us, 3us, 59us, 3us, 904us]
*.switchRearRight.eth[1].macLayer.queue.gateControlList.gateStates = ["10111111", "01000000", "10111111", "01000000", "10111111"]
*.switchRearRight.eth[3].macLayer.queue.hasGcl = true
*.switchRearRight.eth[3].macLayer.queue.gateControlList.offset = 0us
*.switchRearRight.eth[3].macLayer.queue.gateControlList.durations = [31us, 6us, 56us, 6us, 901us]
*.switchRearRight.eth[3].macLayer.queue.gateControlList.gateStates = ["10111111", "01000000", "10111111", "01000000", "10111111"]

# adas
*.adas.eth[0].macLayer.queue.hasGcl = true
*.adas.eth[0].macLayer.queue.gateControlList.offset = 0us
*.adas.eth[0].macLayer.queue.gateControlList.durations = [3us, 997us] # 3 auto streams with 110B(phy frame) = 880Bit(phy frame) + 96Bit(IFG) =1Gbit/s=> 0.976us ~> 1us
*.adas.eth[0].macLayer.queue.gateControlList.gateStates = ["01000000", "10111111"]


####################################
# Stream Redundancy

# enable frame replication and elimination
*.*.hasStreamRedundancy = true

# switch front left
*.switchFrontLeft.bridging.streamRelay.splitter.mapping = {"SLidarFrontLeft": ["SLidarFrontLeft1", "SLidarFrontLeft2"],
                                                           "SManualThrottle": ["SManualThrottle1", "SManualThrottle2"],
                                                           "SManualBrake": ["SManualBrake1", "SManualBrake2"],
                                                           "SManualSteer": ["SManualSteer1", "SManualSteer2"]}

# switch front right
*.switchFrontRight.bridging.streamRelay.splitter.mapping = {"SVideoFront": ["SVideoFront1", "SVideoFront2"],
                                                            "SLidarFrontRight": ["SLidarFrontRight1", "SLidarFrontRight2"]}

# switch rear left
*.switchRearLeft.bridging.streamRelay.splitter.mapping = {"SVideoRear": ["SVideoRear1", "SVideoRear2"],
                                                          "SLidarRearLeft": ["SLidarRearLeft1", "SLidarRearLeft2"]}

# switch rear right
*.switchRearRight.bridging.streamRelay.splitter.mapping = {"SAutoThrottle": ["SAutoThrottle1", "SAutoThrottle2"],
                                                           "SAutoBrake": ["SAutoBrake1", "SAutoBrake2"],
                                                           "SAutoSteer": ["SAutoSteer1", "SAutoSteer2"]}
*.switchRearRight.bridging.streamRelay.merger.mapping = {"SVideoFront1": "SVideoFront", "SVideoFront2": "SVideoFront",
                                                         "SVideoRear1": "SVideoRear", "SVideoRear2": "SVideoRear",
                                                         "SLidarFrontLeft1": "SLidarFrontLeft", "SLidarFrontLeft2": "SLidarFrontLeft",
                                                         "SLidarFrontRight1": "SLidarFrontRight", "SLidarFrontRight2": "SLidarFrontRight",
                                                         "SLidarRearLeft1": "SLidarRearLeft", "SLidarRearLeft2": "SLidarRearLeft"}

# zonal controller front left
*.zonalControllerFrontLeft.bridging.streamRelay.merger.mapping = {"SAutoThrottle1": "SAutoThrottle", "SAutoThrottle2": "SAutoThrottle",
                                                                   "SAutoBrake1": "SAutoBrake", "SAutoBrake2": "SAutoBrake",
                                                                   "SAutoSteer1": "SAutoSteer", "SAutoSteer2": "SAutoSteer"}

# zonal controller front right
*.zonalControllerFrontRight.bridging.streamRelay.merger.mapping = {"SManualThrottle1": "SManualThrottle", "SManualThrottle2": "SManualThrottle",
                                                                   "SManualBrake1": "SManualBrake", "SManualBrake2": "SManualBrake",
                                                                   "SManualSteer1": "SManualSteer", "SManualSteer2": "SManualSteer",
                                                                   "SAutoThrottle1": "SAutoThrottle", "SAutoThrottle2": "SAutoThrottle",
                                                                   "SAutoBrake1": "SAutoBrake", "SAutoBrake2": "SAutoBrake",
                                                                   "SAutoSteer1": "SAutoSteer", "SAutoSteer2": "SAutoSteer"}

# zonal controller rear left
*.zonalControllerRearLeft.bridging.streamRelay.merger.mapping = {"SManualThrottle1": "SManualThrottle", "SManualThrottle2": "SManualThrottle",
                                                                 "SManualBrake1": "SManualBrake", "SManualBrake2": "SManualBrake",
                                                                 "SManualSteer1": "SManualSteer", "SManualSteer2": "SManualSteer",
                                                                 "SAutoThrottle1": "SAutoThrottle", "SAutoThrottle2": "SAutoThrottle",
                                                                 "SAutoBrake1": "SAutoBrake", "SAutoBrake2": "SAutoBrake",
                                                                 "SAutoSteer1": "SAutoSteer", "SAutoSteer2": "SAutoSteer"}

# zonal controller rear right
*.zonalControllerRearRight.bridging.streamRelay.merger.mapping = {"SManualThrottle1": "SManualThrottle", "SManualThrottle2": "SManualThrottle",
                                                                  "SManualBrake1": "SManualBrake", "SManualBrake2": "SManualBrake",
                                                                  "SManualSteer1": "SManualSteer", "SManualSteer2": "SManualSteer",
                                                                  "SAutoThrottle1": "SAutoThrottle", "SAutoThrottle2": "SAutoThrottle",
                                                                  "SAutoBrake1": "SAutoBrake", "SAutoBrake2": "SAutoBrake",
                                                                  "SAutoSteer1": "SAutoSteer", "SAutoSteer2": "SAutoSteer"}


###############################
# No Result Recording
[Config NoResultRecording]
**.statistic-recording = false
**.scalar-recording = false
**.vector-recording = false
**.bin-recording = false


###############################
# PCAP Recording
[Config PcapRecording]


**.crcMode = "computed"
**.fcsMode = "computed"
*.switch*.numPcapRecordersWithLabeling = 1
*.switch*.pcapRecorderWithLabeling[0].pcapLinkType = 1 # Ethernet
*.switchFrontLeft.pcapRecorderWithLabeling[0].pcapFile = "results/${configname}-#${runnumber}-switchFrontLeft.all.pcap"
*.switchFrontRight.pcapRecorderWithLabeling[0].pcapFile = "results/${configname}-#${runnumber}-switchFrontRight.all.pcap"
*.switchRearLeft.pcapRecorderWithLabeling[0].pcapFile = "results/${configname}-#${runnumber}-switchRearLeft.all.pcap"
*.switchRearRight.pcapRecorderWithLabeling[0].pcapFile = "results/${configname}-#${runnumber}-switchRearRight.all.pcap"
*.switch*.pcapRecorderWithLabeling[0].moduleNamePatterns = "eth[*]"
*.switch*.pcapRecorderWithLabeling[0].sendingSignalNames = ""


####################################
# Basic Anomaly Configuration
[Config AnomalyBase]
*.switch*.eth[*].macLayer.typename = "CorruptEthernetMacLayer"
*.zonalController*.eth[*].macLayer.typename = "CorruptEthernetMacLayer"
*.lidar*.eth[*].macLayer.typename = "CorruptEthernetMacLayer"
*.camera*.eth[*].macLayer.typename = "CorruptEthernetMacLayer"
*.infotainment.eth[*].macLayer.typename = "CorruptEthernetMacLayer"
*.connectivityGateway.eth[*].macLayer.typename = "CorruptEthernetMacLayer"
*.adas.eth[*].macLayer.typename = "CorruptEthernetMacLayer"


###############################
# Scenario Configurations
[Config Baseline]
extends = PcapRecording


[Config Baseline_GenerateDataset]
extends = PcapRecording, NoResultRecording


[Config Testscenario]
extends = AnomalyBase, PcapRecording
*.scenarioManager.script = xmldoc("scenarios/Testscenario.xml")
#*.labelManager.label = "SVideoFront1_DELAY"
*.switchFrontRight.eth[1].macLayer.corruptLinkLayer.typename = "CorruptPacketDelay"
#*.switchFrontRight.eth[1].macLayer.corruptLinkLayer.packetFilter = expr(has(udp) && udp.destPort == 1111)
#*.switchFrontRight.eth[1].macLayer.corruptLinkLayer.probability = 0.5
#*.switchFrontRight.eth[1].macLayer.corruptLinkLayer.delayTime = 100us
#*.switchFrontRight.eth[1].macLayer.corruptLinkLayer.backlogDelayTime = 125us


[Config DelayManualSteer]
extends = AnomalyBase
*.scenarioManager.script = xmldoc("scenarios/DelayManualSteer.xml")
*.switchFrontLeft.eth[0].macLayer.corruptLinkLayer.typename = "CorruptPacketDelay"


[Config DelayManualSteer_GenerateDataset]
extends = DelayManualSteer, PcapRecording, NoResultRecording


[Config EliminateAutoBrake]
extends = AnomalyBase
*.scenarioManager.script = xmldoc("scenarios/EliminateAutoBrake.xml")
*.switchRearRight.eth[0..1].macLayer.corruptLinkLayer.typename = "CorruptPacketElimination"


[Config EliminateAutoBrake_GenerateDataset]
extends = EliminateAutoBrake, PcapRecording, NoResultRecording


[Config EliminateLidarFrontLeft]
extends = AnomalyBase
*.scenarioManager.script = xmldoc("scenarios/EliminateLidarFrontLeft.xml")
*.switchFrontLeft.eth[0..1].macLayer.corruptLinkLayer.typename = "CorruptPacketElimination"


[Config EliminateLidarFrontLeft_GenerateDataset]
extends = EliminateLidarFrontLeft, PcapRecording, NoResultRecording


[Config InjectSControl_170]
extends = AnomalyBase
*.scenarioManager.script = xmldoc("scenarios/InjectSControl_170.xml")
*.switchRearLeft.eth[1].macLayer.corruptLinkLayer.typename = "CorruptPacketInjection"


[Config InjectSControl_170_GenerateDataset]
extends = InjectSControl_170, PcapRecording, NoResultRecording


[Config InjectLidarFrontLeft]
extends = AnomalyBase
*.scenarioManager.script = xmldoc("scenarios/InjectLidarFrontLeft.xml")
*.switchFrontLeft.eth[0..1].macLayer.corruptLinkLayer.typename = "CorruptPacketInjection"


[Config InjectLidarFrontLeft_GenerateDataset]
extends = InjectLidarFrontLeft, PcapRecording, NoResultRecording


[Config ReorderCameraFront]
extends = AnomalyBase
*.scenarioManager.script = xmldoc("scenarios/ReorderCameraFront.xml")
*.switchFrontRight.eth[1].macLayer.corruptLinkLayer.typename = "CorruptPacketReordering"


[Config ReorderCameraFront_GenerateDataset]
extends = ReorderCameraFront, PcapRecording, NoResultRecording


[Config ReorderLidarFrontLeft]
extends = AnomalyBase
*.scenarioManager.script = xmldoc("scenarios/ReorderLidarFrontLeft.xml")
*.switchFrontLeft.eth[0..1].macLayer.corruptLinkLayer.typename = "CorruptPacketReordering"


[Config ReorderLidarFrontLeft_GenerateDataset]
extends = ReorderLidarFrontLeft, PcapRecording, NoResultRecording
